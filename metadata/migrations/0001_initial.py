# Generated by Django 2.1.7 on 2019-03-01 00:39

import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('comics', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appearance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('S', 'Standard'), ('O', 'Off Screen'), ('M', 'Mentioned')], default='S', help_text='Whether visible on the page, or otherwise present.', max_length=1)),
                ('is_spoiler', models.BooleanField(default=False, help_text='Obscure this appearance in certain contexts.')),
                ('installment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='comics.Installment')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='comics.Page')),
            ],
            options={
                'ordering': ['page__order'],
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='One-to-several paragraphs, but not a full wiki entry.')),
            ],
            options={
                'ordering': ['primary_persona__name'],
            },
        ),
        migrations.CreateModel(
            name='CharacterUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('order', models.PositiveSmallIntegerField(default=0)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='metadata.Character')),
            ],
            options={
                'verbose_name': 'url',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('order', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Credit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ['role__order', 'entity__working_name'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('working_name', models.CharField(help_text='Name of person/group/collective/circle/etc.', max_length=100, unique=True)),
                ('avatar', models.ImageField(blank=True, upload_to='avatars')),
                ('works', models.ManyToManyField(related_name='entities', through='metadata.Credit', to='comics.Installment')),
            ],
            options={
                'verbose_name_plural': 'entities',
                'ordering': ['working_name'],
            },
        ),
        migrations.CreateModel(
            name='EntityUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField()),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Preferred display order.')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='metadata.Entity')),
            ],
            options={
                'verbose_name': 'url',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Persona',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name, without any additional designation.', max_length=200)),
                ('type', models.CharField(choices=[('GN', 'Given Name'), ('SI', 'Super Identity'), ('AP', 'Personality'), ('TL', 'Title'), ('JJ', 'Alias'), ('RP', 'Role')], default='GN', help_text='Alter ego type or purpose.', max_length=2)),
                ('mugshot', models.ImageField(blank=True, upload_to='personas')),
                ('profile_pic', models.ImageField(blank=True, upload_to='personas')),
                ('character', models.ForeignKey(blank=True, help_text='Singular underlying entity.', on_delete=django.db.models.deletion.CASCADE, related_name='personas', to='metadata.Character')),
                ('classification', models.ForeignKey(default=1, help_text='Alter ego manner of being. (See: Shazam)', on_delete=django.db.models.deletion.PROTECT, related_name='personas', to='metadata.Classification')),
                ('creators', models.ManyToManyField(blank=True, related_name='personas', related_query_name='persona', to='metadata.Entity')),
                ('installments', models.ManyToManyField(related_name='personas', through='metadata.Appearance', to='comics.Installment')),
                ('pages', models.ManyToManyField(related_name='personas', through='metadata.Appearance', to='comics.Page')),
            ],
            options={
                'ordering': ['name'],
                'default_manager_name': 'display_objects',
            },
            managers=[
                ('display_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Default order to list different role types.')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='credit',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='metadata.Entity'),
        ),
        migrations.AddField(
            model_name='credit',
            name='installment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credits', to='comics.Installment'),
        ),
        migrations.AddField(
            model_name='credit',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.Role'),
        ),
        migrations.AddField(
            model_name='character',
            name='primary_persona',
            field=models.OneToOneField(blank=True, help_text='What this character is primarily known as.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_for', to='metadata.Persona'),
        ),
        migrations.AddField(
            model_name='appearance',
            name='persona',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appearances', to='metadata.Persona'),
        ),
        migrations.AlterUniqueTogether(
            name='persona',
            unique_together={('character', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='credit',
            unique_together={('installment', 'role', 'entity')},
        ),
        migrations.AlterUniqueTogether(
            name='appearance',
            unique_together={('installment', 'persona', 'page')},
        ),
    ]
